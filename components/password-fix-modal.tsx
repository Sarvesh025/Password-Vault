"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Slider } from "@/components/ui/slider"
import { Switch } from "@/components/ui/switch"
import { PasswordStrengthMeter } from "@/components/password-strength-meter"
import { Copy, Check, Loader2 } from "lucide-react"
import type { Password } from "@/lib/types"
import { toast } from "@/components/ui/toast-provider"
import { verifyMasterPassword } from "@/lib/auth"
import { updatePassword } from "@/lib/passwords"

interface PasswordFixModalProps {
  password: Password | null
  isOpen: boolean
  onClose: () => void
  onSave: (id: string, newPassword: string) => void
  type?: "weak" | "old" | "duplicate"
}

export function PasswordFixModal({ password, isOpen, onClose, onSave, type = "weak" }: PasswordFixModalProps) {
  const [newPassword, setNewPassword] = useState("")
  const [length, setLength] = useState(16)
  const [includeUppercase, setIncludeUppercase] = useState(true)
  const [includeLowercase, setIncludeLowercase] = useState(true)
  const [includeNumbers, setIncludeNumbers] = useState(true)
  const [includeSymbols, setIncludeSymbols] = useState(true)
  const [masterPassword, setMasterPassword] = useState("")
  const [error, setError] = useState("")
  const [step, setStep] = useState<"generate" | "verify">("generate")
  const [loading, setLoading] = useState(false)
  const [copied, setCopied] = useState(false)
  const [autoGenerated, setAutoGenerated] = useState(false)

  // Analyze the old password when the modal opens
  useEffect(() => {
    if (isOpen && password && type === "old") {
      analyzeAndGeneratePassword(password.password)
    }
  }, [isOpen, password, type])

  const analyzeAndGeneratePassword = (oldPassword: string) => {
    if (!oldPassword) return

    // Analyze password characteristics
    const hasUppercase = /[A-Z]/.test(oldPassword)
    const hasLowercase = /[a-z]/.test(oldPassword)
    const hasNumber = /[0-9]/.test(oldPassword)
    const hasSymbol = /[^a-zA-Z0-9]/.test(oldPassword)
    const passwordLength = oldPassword.length

    // Set the form values based on the analysis
    setIncludeUppercase(hasUppercase)
    setIncludeLowercase(hasLowercase)
    setIncludeNumbers(hasNumber)
    setIncludeSymbols(hasSymbol)
    setLength(passwordLength)

    // Auto-generate a new password with the same characteristics
    generatePasswordWithSettings(passwordLength, hasUppercase, hasLowercase, hasNumber, hasSymbol)

    setAutoGenerated(true)
  }

  const generatePasswordWithSettings = (
    len: number,
    upper: boolean,
    lower: boolean,
    numbers: boolean,
    symbols: boolean,
  ) => {
    let charset = ""
    if (lower) charset += "abcdefghijklmnopqrstuvwxyz"
    if (upper) charset += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if (numbers) charset += "0123456789"
    if (symbols) charset += "!@#$%^&*()_+-=[]{}|;:,.<>?"

    if (charset === "") {
      setError("Please select at least one character type")
      return
    }

    // Ensure we have either lowercase or numbers
    if (!lower && !numbers) {
      charset += "abcdefghijklmnopqrstuvwxyz"
    }

    let generatedPassword = ""
    for (let i = 0; i < len; i++) {
      const randomIndex = Math.floor(Math.random() * charset.length)
      generatedPassword += charset[randomIndex]
    }

    setNewPassword(generatedPassword)
    setError("")
  }

  const generatePassword = () => {
    generatePasswordWithSettings(length, includeUppercase, includeLowercase, includeNumbers, includeSymbols)
  }

  const handleConfirm = async () => {
    if (!newPassword) {
      setError("Please generate a password first")
      return
    }
    if (!password) {
      setError("Password not found")
      return
    }

    try {
      const updateResponse = await updatePassword(password.id, newPassword);
      console.log("Update Response : -", updateResponse);

      // const updatedPassword = await updateResponse.json();
      onSave(password?.id || '', newPassword);
      setMasterPassword("");
      setNewPassword("");
      onClose();
      toast.success("Password updated successfully");
    } catch (error) {
      setError("Invalid master password");
      toast.error("Failed to update password");
    }
  }

  const copyToClipboard = () => {
    navigator.clipboard
      .writeText(newPassword)
      .then(() => {
        setCopied(true)
        setTimeout(() => setCopied(false), 2000)
        toast.success("Password copied to clipboard")
      })
      .catch(() => toast.error("Failed to copy password"))
  }

  const handleSave = async () => {
    if (!password) return

    setError("")
    setLoading(true)

    try {
      const isValid = await verifyMasterPassword(masterPassword)

      if (!isValid) {
        setError("Invalid master password")
        setLoading(false)
        return
      }

      onSave(password.id, newPassword)
      setMasterPassword("")
      setNewPassword("")
      setStep("generate")
      onClose()
    } catch (err) {
      setError("An error occurred. Please try again.")
      setLoading(false)
    }
  }

  const resetModal = () => {
    setNewPassword("")
    setMasterPassword("")
    setError("")
    setStep("generate")
    setAutoGenerated(false)
  }

  return (
    <Dialog
      open={isOpen}
      onOpenChange={(open) => {
        if (!open) {
          resetModal()
          onClose()
        }
      }}
    >
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>{step === "generate" ? "Fix Password" : "Verify Master Password"}</DialogTitle>
          <DialogDescription>
            {step === "generate"
              ? `Generate a ${type === "weak" ? "stronger" : type === "old" ? "new" : "unique"} password for ${password?.name}`
              : "Enter your master password to confirm this change"}
          </DialogDescription>
        </DialogHeader>

        {step === "generate" ? (
          <div className="space-y-4 py-4">
            {type === "old" && autoGenerated && (
              <div className="rounded-md bg-blue-50 p-3 text-sm text-blue-800 dark:bg-blue-900/30 dark:text-blue-400">
                A new password has been automatically generated with similar characteristics to your old password.
              </div>
            )}

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="length">Length: {length}</Label>
              </div>
              <Slider
                id="length"
                min={8}
                max={32}
                step={1}
                value={[length]}
                onValueChange={(value) => setLength(value[0])}
              />
            </div>

            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Switch id="uppercase" checked={includeUppercase} onCheckedChange={setIncludeUppercase} />
                <Label htmlFor="uppercase">Include Uppercase Letters (A-Z)</Label>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Switch
                  id="lowercase"
                  checked={includeLowercase}
                  onCheckedChange={(checked) => {
                    setIncludeLowercase(checked)
                    if (!checked && !includeNumbers) {
                      setIncludeNumbers(true)
                    }
                  }}
                />
                <Label htmlFor="lowercase">Include Lowercase Letters (a-z)</Label>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Switch
                  id="numbers"
                  checked={includeNumbers}
                  onCheckedChange={(checked) => {
                    setIncludeNumbers(checked)
                    if (!checked && !includeLowercase) {
                      setIncludeLowercase(true)
                    }
                  }}
                />
                <Label htmlFor="numbers">Include Numbers (0-9)</Label>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Switch id="symbols" checked={includeSymbols} onCheckedChange={setIncludeSymbols} />
                <Label htmlFor="symbols">Include Symbols (!@#$%^&*)</Label>
              </div>
            </div>

            <Button onClick={generatePassword} className="w-full">
              Generate New Password
            </Button>

            {newPassword && (
              <div className="mt-4 space-y-2">
                <Label>New Password</Label>
                <div className="flex items-center gap-2">
                  <Input value={newPassword} readOnly className="font-mono" />
                  <Button variant="outline" size="icon" onClick={copyToClipboard} className="relative">
                    {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                  </Button>
                </div>
                <PasswordStrengthMeter password={newPassword} />
              </div>
            )}

            {error && <p className="text-sm text-destructive">{error}</p>}
          </div>
        ) : (
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="master-password">Master Password</Label>
              <Input
                id="master-password"
                type="password"
                value={masterPassword}
                onChange={(e) => setMasterPassword(e.target.value)}
                placeholder="Enter your master password"
              />
            </div>
            {error && <p className="text-sm text-destructive">{error}</p>}
          </div>
        )}

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>

          {step === "generate" ? (
            <Button onClick={handleConfirm} disabled={!newPassword}>
              Continue
            </Button>
          ) : (
            <Button onClick={handleSave} disabled={!masterPassword || loading}>
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Verifying...
                </>
              ) : (
                "Save Password"
              )}
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

